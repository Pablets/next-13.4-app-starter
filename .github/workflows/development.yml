name: Development

on:
  pull_request:
    branches: [development]

jobs:
  setup-and-test:
    if: ${{false == true}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      ##### Cache (next)
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Run Lint
        run: |
          npm run lint

      - name: Run Type Check
        run: |
          npm run ts-lint

      - name: Run Test
        run: npm run test:coverage

  chromatic-deployment:
    if: ${{false == true}}
    runs-on: ubuntu-latest
    needs: setup-and-test
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      ##### Install dependencies
      - name: Install dependencies
        run: npm ci
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          autoAcceptChanges: true
          allowConsoleErrors: true
          exitOnceUploaded: true

  release:
    if: ${{false == true}}
    runs-on: ubuntu-latest
    needs: setup-and-test
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
        ##### Cache (next)
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      ##### Install dependencies
      - name: Install dependencies
        run: npm ci
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

  Deploy-Preview:
    if: ${{false == true}}
    needs: setup-and-test
    runs-on: ubuntu-latest
    # if: ${{!contains(github.event.head_commit.message, '[skip ci]')}}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Get branch name (merge)
      #   if: github.event_name != 'pull_request'
      #   shell: bash
      #   run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/}.vercel.app | tr / -)" >> $GITHUB_ENV

      # - name: Get branch name (pull request)
      #   if: github.event_name == 'pull_request'
      #   shell: bash
      #   run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF}.vercel.app | tr / -)" >> $GITHUB_ENV

      - name: Deploy to Vercel Action
        id: vercel-deploy
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_USER_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          GITHUB_DEPLOYMENT_ENV: Preview
          PRODUCTION: false # Don't deploy to production environment
          PR_PREVIEW_DOMAIN: 'xoor-2023-dev-{SHA}.vercel.app'

  Deploy-Preview-amond:
    # needs: setup-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      ##### Install dependencies
      - uses: actions/checkout@v3
      - run: |
          npm ci
          npx vercel pull --yes --token=${VERCEL_TOKEN}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_NEXTJS }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      - run: |
          npx vercel build
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_NEXTJS }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      - name: production or not
        id: prod_or_not
        run: |
          if [ "$REF" == 'refs/heads/@release/prod' ]
          then
              echo "vercel-args=-y --prod --prebuilt" >> $GITHUB_OUTPUT
          else
              echo "vercel-args=-y --prebuilt" >> $GITHUB_OUTPUT
          fi
        env:
          REF: ${{ github.ref }}
      - uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
          vercel-org-id: ${{ secrets.USER_ID}} #Required
          vercel-project-id: ${{ secrets.PROJECT_ID}} #Required
          vercel-args: ${{ steps.prod_or_not.outputs.vercel-args }}
          vercel-version: '31.0.1'
          alias-domains: | #Optional
            development-{{PR_NUMBER}}.vercel.app
